from queue import PriorityQueue

class PuzzleState:
    def __init__(self, puzzle, parent=None, move=None, depth=0):
        self.puzzle = puzzle
        self.parent = parent
        self.move = move
        self.depth = depth

    def __lt__(self, other):
        return (self.depth + self.heuristic()) < (other.depth + other.heuristic())

    def __eq__(self, other):
        return self.puzzle == other.puzzle

    def __hash__(self):
        return hash(str(self.puzzle))

    def heuristic(self):
        # Manhattan distance
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] != 0:
                    row = (self.puzzle[i][j] - 1) // 3
                    col = (self.puzzle[i][j] - 1) % 3
                    distance += abs(row - i) + abs(col - j)
        return distance

    def get_neighbors(self):
        neighbors = []
        i, j = self.find_blank()
        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # Possible moves: right, left, down, up
        for di, dj in moves:
            if 0 <= i + di < 3 and 0 <= j + dj < 3:
                neighbor = [row[:] for row in self.puzzle]
                neighbor[i][j], neighbor[i + di][j + dj] = neighbor[i + di][j + dj], neighbor[i][j]
                neighbors.append(PuzzleState(neighbor, parent=self, move=(i + di, j + dj), depth=self.depth + 1))
        return neighbors

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] == 0:
                    return i, j

def reconstruct_path(current_state):
    path = []
    while current_state.parent is not None:
        path.append(current_state.move)
        current_state = current_state.parent
    path.reverse()
    return path

def a_star(initial_state):
    frontier = PriorityQueue()
    explored = set()
    frontier.put(initial_state)
    while not frontier.empty():
        current_state = frontier.get()
        if current_state.puzzle == goal_state:
            return reconstruct_path(current_state)
        explored.add(current_state)
        for neighbor in current_state.get_neighbors():
            if neighbor not in explored:
                frontier.put(neighbor)

# Initial and goal states
initial_state = PuzzleState([[1, 2, 3], [0, 4, 6], [7, 5, 8]])
goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

# Solve the puzzle
solution = a_star(initial_state)
print("Solution:", solution)
